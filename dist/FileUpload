package main.java.com.webservice.filemgmt;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import main.java.com.auditlogmgnt.AuditLogPersistanceManager;
import main.java.com.common.ErrorCodesEnum;
import main.java.com.common.vo.ServiceResponseVO;
import main.java.com.domain.DocumentVO;
import main.java.com.framework.exception.ExceptionHandler;
import main.java.com.framework.logger.ErrorLog;
import main.java.com.framework.utils.ApplicationContextProvider;
import main.java.com.webservice.GenericWebService;

import org.apache.commons.fileupload.FileItemIterator;
import org.apache.commons.fileupload.FileItemStream;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import com.google.gson.Gson;

public class FileUploadServlet extends HttpServlet implements GenericWebService {
	private static final long serialVersionUID = -8244073279641189889L;
	private static ErrorLog logger;
	static {
		logger = ErrorLog.getLogger(FileUploadServlet.class);
	}

	@Override
	protected void service(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {
		String documentName = "";
		ServiceResponseVO<DocumentVO> files = null;
		BigDecimal incId = new BigDecimal(req.getPathInfo().substring(1));
		AuditLogPersistanceManager auditLogPersistanceManager = ApplicationContextProvider
				.getApplicationContext().getBean(
						AuditLogPersistanceManager.class);

		FileManagementService fileManagerService = ApplicationContextProvider
				.getApplicationContext().getBean(FileManagementService.class);
		if (req.getHeader("Content-Type") != null
				&& req.getHeader("Content-Type").startsWith(
						"multipart/form-data")) {
			logger.debug("File upload using multipart/form-data");

			ServletFileUpload servletFileUpload = new ServletFileUpload();

			FileItemIterator fileItemIterator = null;
			InputStream bufferedInputStream = null;
			try {
				// initialize Audit log
				auditLogPersistanceManager.initAuditLogTransationEntity();

				fileItemIterator = servletFileUpload.getItemIterator(req);
				FileItemStream fileItemStream = fileItemIterator.next();
				bufferedInputStream = new BufferedInputStream(
						fileItemStream.openStream());

				if (fileItemStream.getName() != null) {

					documentName = fileItemStream.getName();
					if (documentName.lastIndexOf("\\") != -1) {
						documentName = documentName.substring(
								documentName.lastIndexOf("\\") + 1,
								documentName.length());
					}
				}
				files = fileManagerService.uploadDcoument(bufferedInputStream,
						documentName, incId);
				
				// tear down Audit log
				auditLogPersistanceManager.tearDownAuditInfo();
			} catch (Exception e) {
				ExceptionHandler.mailException(req, e);
				logger.error("Error occured getting uploaded documents", e);
				files = new ServiceResponseVO<DocumentVO>(
						ErrorCodesEnum.UPLOAD_DOCUMENTS_ERROR);
			} finally {
				res.getWriter().write(new Gson().toJson(files));
				res.setHeader("Content-Type", "text/plain");
			}

		}
	}

}
============================================================================================================

	public DocumentVO uploadDocument(InputStream bufferedInputStream,
			String documentName, BigDecimal incidentid) throws IOException {
		String docNameForDB = "";

		Map<String, DocumentVO> documentMap = getDocumentListofIncident(incidentid);
		DocumentVO documentVO = new DocumentVO();
		if (documentMap.containsKey(documentName)) {
			documentVO = documentMap.get(documentName);
			Long latestVersion = 1L;
			for (VersionVO versionVO : documentVO.getVersionVOList()) {
				if (latestVersion < versionVO.getVersionId()) {
					latestVersion = versionVO.getVersionId();
				}
			}
			docNameForDB = incidentid + "_" + (latestVersion + 1) + "_"
					+ documentName;
		} else {
			docNameForDB = incidentid + "_" + "1_" + documentName;
		}

		long size = saveFile(bufferedInputStream, docNameForDB);
		Document document = new Document();
		document.setDocumentName(docNameForDB);
		// TODO: discuss for comment and path
		document.setComment("");
		document.setPath("");
		document.setExternalLinkFlag("");
		document.setIncidentId(incidentid);
		// TODO: set size
		document.setSize((int) size);
		document.setUpdateBy(sessionCache.getUserDetailsVO().getPerson()
				.getUid().trim());
		document.setUpdateTs(dateUtil.getSystemDate());
		documentDAO.save(document);
		documentVO = populateDocumentVO(document);
		// String docName = documentVO.getDocumentName().split("_", 3)[2];
		documentVO.setDocumentName(documentName);

		return documentVO;
	}



	private Map<String, DocumentVO> getDocumentListofIncident(
			BigDecimal incidentID) {
		List<Document> docsList = documentDAO
				.findDocumentByIncidentId(incidentID);
		Map<String, DocumentVO> tempMap = new HashMap<String, DocumentVO>();

		for (Document obj : docsList) {

			String key = "";
			String docName[] = obj.getDocumentName().split("_", 3);
			if (docName.length > 2)
				key = docName[2];
			else
				key = docName[1];
			String version = docName[1];
			if (!tempMap.containsKey(key)) {

				VersionVO versionVO = new VersionVO();
				versionVO.setDocumentId(obj.getDocumentId());
				versionVO.setVersionId(Long.parseLong(version));
				versionVO.setUpdateBy(obj.getUpdateBy());
				versionVO.setSize(obj.getSize());
				versionVO.setUpdateTs(obj.getUpdateTs());

				DocumentVO documentVO = new DocumentVO();
				documentVO.setDocumentName(key);
				documentVO.getVersionVOList().add(versionVO);

				// add to Document Map.
				tempMap.put(key, documentVO);
			} else {
				DocumentVO documentVO = tempMap.get(key);

				VersionVO versionVO = new VersionVO();
				versionVO.setDocumentId(obj.getDocumentId());
				versionVO.setVersionId(Long.parseLong(version));
				versionVO.setUpdateBy(obj.getUpdateBy());
				versionVO.setSize(obj.getSize());
				versionVO.setUpdateTs(obj.getUpdateTs());

				documentVO.getVersionVOList().add(versionVO);
				// below is not required.
				// tempMap.put(key, documentVO);
			}

		}
		return tempMap;
	}

package main.java.com.filemgmt;

import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import main.java.com.common.SystemParameterEnum;
import main.java.com.domain.AllowableFileTypeVO;
import main.java.com.domain.DocumentVO;
import main.java.com.domain.IncidentStagesEnum;
import main.java.com.domain.IncidentVO;
import main.java.com.domain.ReportFlowVO;
import main.java.com.domain.SessionCache;
import main.java.com.domain.VersionVO;
import main.java.com.domain.auditpresentation.AuditLogSummaryVO;
import main.java.com.domain.auditpresentation.IncidentReportFlowLogVO;
import main.java.com.domain.auditpresentation.RegulatorStateLogVO;
import main.java.com.framework.AppConfig;
import main.java.com.framework.logger.ErrorLog;
import main.java.com.framework.logger.ErrorLogger;
import main.java.com.framework.utils.CommonUtil;
import main.java.com.framework.utils.DateUtils;
import main.java.com.framework.utils.FileUtility;
import main.java.com.framework.utils.SystemParamertes;
import main.java.com.incidentmgmt.AuditLogDetailNotFoundException;
import main.java.com.incidentmgmt.IncidentManager;
import main.java.com.incidentmgmt.dao.DocumentDAO;
import main.java.com.incidentmgmt.dao.IncidentDAO;
import main.java.com.incidentmgmt.entity.Document;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Row;
import org.jsoup.Jsoup;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * 
 * @author himanc
 * 
 */
@Component
@Transactional(propagation = Propagation.MANDATORY)
public class FileManager {

	@ErrorLogger
	ErrorLog logger;

	@Autowired
	private DocumentDAO documentDAO;

	@Autowired
	private IncidentManager incidentManager;

	@Autowired
	private IncidentDAO incidentDAO;

	@Autowired
	private SessionCache sessionCache;

	@Autowired
	private AppConfig appConfig;

	@Autowired
	private DateUtils dateUtil;

	@Autowired
	private SystemParamertes systemParamertes;

	public File downloadFileViaURL(long fileID) {
		// String saveFilePath=appConfig.getIncidentAttachmentPath();
		String destinationDir = systemParamertes
				.getParameter(SystemParameterEnum.INCIDENT_ATTACHMENT_PATH);

		String fileName = documentDAO.findDocumentName(fileID);
		// char slash = '\\';
		String fileURL = destinationDir + fileName;

		File file = fileUrl(fileURL);
		return file;

	}

	public File fileUrl(String fAddress) {

		try {

			File file = null;

			if (FileUtility.exists(fAddress)) {
				file = new File(fAddress);
			}

			return file;

		} catch (Exception e) {
			logger.error("Error in fileUrl method", e);
			throw e;
		}

	}

	/**
	 * 
	 * @param incidentID
	 * @param reportFlowID
	 * @return
	 */
	public ResponseBuilder downloadIncidentReport(BigDecimal incidentID)
			throws AuditLogDetailNotFoundException, IOException {
		ResponseBuilder rb = null;
		/*
		 * if (reportFlowID == -1) { IncidentVO incidentVO = incidentManager
		 * .getIncidentDetails(incidentID); rb = writeToExcel(incidentVO, null);
		 * } else {
		 */
		IncidentVO incidentVO = incidentManager.getIncidentDetails(incidentID);
		/*
		 * List<IncidentReportFlowLogVO> incidentReportFlowLogVOList =
		 * (List<IncidentReportFlowLogVO>) incidentDAO
		 * .getIncidentRegulatorStateChangeAuditLog(reportFlowID);
		 */
		rb = writeToExcel(incidentVO, null);

		// }
		// IncidentVO
		// incidentVO=incidentManager.getIncidentDetailsRegulatorWise(incidentID,reportFlowID);
		return rb;

	}

	public ResponseBuilder writeToExcel(IncidentVO incidentVO,
			List<IncidentReportFlowLogVO> incidentReportFlowLogVOList)
			throws IOException {
		ResponseBuilder rb = null;
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		HSSFWorkbook workbook = new HSSFWorkbook();
		HSSFSheet sheet = workbook.createSheet("Inicident Report");
		int rownum = 0, cellnum = 0;
		CreationHelper createHelper = workbook.getCreationHelper();
		HSSFFont boldFont = workbook.createFont();
		boldFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

		HSSFCellStyle style = workbook.createCellStyle();
		style.setFillForegroundColor(HSSFColor.GREY_40_PERCENT.index);
		style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		style.setFont(boldFont);
		style.setWrapText(true);
		style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
		style.setBorderRight(HSSFCellStyle.BORDER_THIN);
		style.setBorderTop(HSSFCellStyle.BORDER_THIN);

		HSSFCellStyle style1 = workbook.createCellStyle();
		style1.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);
		style1.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		style1.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		style1.setBorderLeft(HSSFCellStyle.BORDER_THIN);
		style1.setBorderRight(HSSFCellStyle.BORDER_THIN);
		style1.setBorderTop(HSSFCellStyle.BORDER_THIN);
		style1.setWrapText(true);

		Row row = sheet.createRow(rownum++);

		Cell cell = row.createCell(cellnum++);
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setDataFormat(createHelper.createDataFormat().getFormat(
				"yyyy-MM-DD hh:mm "));
		cellStyle.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);
		cellStyle.setWrapText(true);
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cellStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		cellStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
		cellStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
		cellStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
		cellStyle.setAlignment(CellStyle.ALIGN_LEFT);

		cell.setCellValue("Incident Name");
		cell.setCellStyle(style);
		cell = row.createCell(cellnum++);
		cell.setCellValue(incidentVO.getIncidentName());
		cell.setCellStyle(style1);

		cellnum = 0;
		row = sheet.createRow(rownum++);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Start");
		cell.setCellStyle(style);
		cell = row.createCell(cellnum++);
		if (incidentVO.getStartTime() != null) {
			Date startDate = new Date(incidentVO.getStartTime().getTime());
			cell.setCellValue((Date) startDate);
		}
		cell.setCellStyle(cellStyle);

		cellnum = 0;
		row = sheet.createRow(rownum++);
		cell = row.createCell(cellnum++);
		cell.setCellValue("End");
		cell.setCellStyle(style);
		cell = row.createCell(cellnum++);
		Timestamp endTime = calculateEndTime(incidentVO);
		if (endTime != null) {
			Date endDate = new Date(endTime.getTime());
			cell.setCellValue(endDate);
		}
		cell.setCellStyle(cellStyle);

		cellnum = 0;
		row = sheet.createRow(rownum++);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Description");
		cell.setCellStyle(style);
		cell = row.createCell(cellnum++);
		if (null != incidentVO.getIncidentDescription()
				&& !incidentVO.getIncidentDescription().isEmpty()) {
			cell.setCellValue(Jsoup.parse(incidentVO.getIncidentDescription())
					.text());
		}
		cell.setCellStyle(style1);

		cellnum = 0;
		row = sheet.createRow(rownum++);
		cell = row.createCell(cellnum++);
		cell.setCellValue("BackGround");
		cell.setCellStyle(style);
		cell = row.createCell(cellnum++);
		if (null != incidentVO.getBackground()
				&& !incidentVO.getBackground().isEmpty()) {
			cell.setCellValue(Jsoup.parse(incidentVO.getBackground()).text());
		}
		cell.setCellStyle(style1);

		cellnum = 0;
		row = sheet.createRow(rownum++);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Root Cause");
		cell.setCellStyle(style);
		cell = row.createCell(cellnum++);
		if (null != incidentVO.getRootCause()
				&& !incidentVO.getRootCause().isEmpty()) {
			cell.setCellValue(Jsoup.parse(incidentVO.getRootCause()).text());
		}
		cell.setCellStyle(style1);

		cellnum = 0;
		row = sheet.createRow(rownum++);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Impact");
		cell.setCellStyle(style);
		cell = row.createCell(cellnum++);
		if (null != incidentVO.getImpact() && !incidentVO.getImpact().isEmpty()) {
			cell.setCellValue(Jsoup.parse(incidentVO.getImpact()).text());
		}
		cell.setCellStyle(style1);

		cellnum = 0;
		row = sheet.createRow(rownum++);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Client Complaints");
		cell.setCellStyle(style);
		cell = row.createCell(cellnum++);
		if (null != incidentVO.getClientComplaints()
				&& !incidentVO.getClientComplaints().isEmpty()) {
			cell.setCellValue(Jsoup.parse(incidentVO.getClientComplaints())
					.text());
		}
		cell.setCellStyle(style1);

		cellnum = 0;
		row = sheet.createRow(rownum++);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Resolution");
		cell.setCellStyle(style);
		cell = row.createCell(cellnum++);
		if (null != incidentVO.getResolution()
				&& !incidentVO.getResolution().isEmpty()) {
			cell.setCellValue(Jsoup.parse(incidentVO.getResolution()).text());
		}
		cell.setCellStyle(style1);

		cellnum = 0;
		row = sheet.createRow(rownum++);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Remedial Actions");
		cell.setCellStyle(style);
		cell = row.createCell(cellnum++);
		if (null != incidentVO.getRemedialActions()
				&& !incidentVO.getRemedialActions().isEmpty()) {
			cell.setCellValue(Jsoup.parse(incidentVO.getRemedialActions())
					.text());
		}
		cell.setCellStyle(style1);

		sheet.autoSizeColumn(0);
		sheet.autoSizeColumn(1);

		if (incidentReportFlowLogVOList != null)
			witeAuditDataToExcel(workbook, incidentReportFlowLogVOList);
		String fileName = (incidentVO.getIncidentId())
				+ "_IncidentDetail_Report.xls";
		workbook.write(bos);
		rb = Response.ok(bos.toByteArray()).type("application/vnd.ms-excel");
		rb.header("Content-Disposition", "attachment;filename=" + fileName);
		return rb;
	}

	public Timestamp calculateEndTime(IncidentVO incidentVO) {
		List<ReportFlowVO> reportFlowList = incidentVO.getReportFlowVOList();
		Timestamp endTimestamp = null;
		if(incidentVO.getStateId() == IncidentStagesEnum.CLOSED.getValue() || incidentVO.getStateId() == IncidentStagesEnum
				.OUT_OF_SCOPE.getValue() || incidentVO.getStateId() == IncidentStagesEnum.CLOSED_RETRACTED.getValue() || incidentVO.getStateId() == IncidentStagesEnum.RETRACTED.getValue())
		{
			
			Collections.sort(reportFlowList,
					new Comparator<ReportFlowVO>() {
						@Override
						public int compare(final ReportFlowVO object1,
								final ReportFlowVO object2) {
							return (object1.getUpdateTs().compareTo(
									object2.getUpdateTs()) * -1);

						}
					});
			endTimestamp = reportFlowList.get(0).getUpdateTs();
		}
		
		return endTimestamp;
	}

	public void witeAuditDataToExcel(HSSFWorkbook workbook,
			List<IncidentReportFlowLogVO> incidentReportFlowLogVOList) {
		HSSFSheet sheet1 = workbook.createSheet("Change History");
		int rownum = 0, cellnum = 0;
		CreationHelper createHelper = workbook.getCreationHelper();

		HSSFFont boldFont1 = workbook.createFont();
		boldFont1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

		HSSFCellStyle style2 = workbook.createCellStyle();
		style2.setFillForegroundColor(HSSFColor.GREY_40_PERCENT.index);
		style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		style2.setFont(boldFont1);
		style2.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);
		style2.setBorderRight(HSSFCellStyle.BORDER_THIN);
		style2.setBorderTop(HSSFCellStyle.BORDER_THIN);
		style2.setAlignment(CellStyle.ALIGN_CENTER);
	

		Row row = sheet1.createRow(rownum++);

		Cell cell = row.createCell(cellnum++);
		cell.setCellValue("User");
		cell.setCellStyle(style2);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Update Time");
		cell.setCellStyle(style2);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Comment");
		cell.setCellStyle(style2);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Entity Changed");
		cell.setCellStyle(style2);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Action");
		cell.setCellStyle(style2);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Field Modified");
		cell.setCellStyle(style2);
		cell = row.createCell(cellnum++);
		cell.setCellValue("Old Value");
		cell.setCellStyle(style2);
		cell = row.createCell(cellnum++);
		cell.setCellValue("New Value");
		cell.setCellStyle(style2);

		HSSFCellStyle style3 = workbook.createCellStyle();
		
		style3.setAlignment(CellStyle.ALIGN_CENTER);
		style3.setWrapText(true);
		if (null != incidentReportFlowLogVOList) {
			for (int i = 0; i < incidentReportFlowLogVOList.size(); i++) {
				IncidentReportFlowLogVO incidentReportFlowLogVO = incidentReportFlowLogVOList
						.get(i);
				row = sheet1.createRow(rownum++);
				cellnum = 0;
				cell = row.createCell(cellnum++);
				cell.setCellValue(incidentReportFlowLogVO.getUpdateBy());
				cell.setCellStyle(style3);

				cell = row.createCell(cellnum++);
				CellStyle cellStyle = workbook.createCellStyle();
				cellStyle.setAlignment(CellStyle.ALIGN_CENTER);
				cellStyle.setDataFormat(createHelper.createDataFormat()
						.getFormat("yyyy-MM-DD hh:mm "));
				Date updateTs = new Date(incidentReportFlowLogVO.getUpdateTs()
						.getTime());
				cell.setCellValue((Date) updateTs);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(cellnum++);
				cell.setCellValue(incidentReportFlowLogVO.getComment());
				cell.setCellStyle(style3);

				cell = row.createCell(cellnum++);
				cell.setCellValue(incidentReportFlowLogVO.getEntityName());
				cell.setCellStyle(style3);

				cell = row.createCell(cellnum++);
				cell.setCellValue(incidentReportFlowLogVO.getActionName());
				cell.setCellStyle(style3);

				cell = row.createCell(cellnum++);
				cell.setCellValue(incidentReportFlowLogVO.getColumnName());
				cell.setCellStyle(style3);

				cell = row.createCell(cellnum++);
				cell.setCellValue(incidentReportFlowLogVO.getOldValue());
				cell.setCellStyle(style3);

				cell = row.createCell(cellnum++);
				cell.setCellValue(incidentReportFlowLogVO.getNewValue());
				cell.setCellStyle(style3);
			}
		}
		for (int i = 0; i < 7; i++) {
			sheet1.autoSizeColumn(i);
		}

	}

	public void witeAuditDataToExcelForStateChange(HSSFWorkbook workbook,
			List<RegulatorStateLogVO> regulatorStateLogVOList) {
		HSSFSheet sheet1 = workbook.createSheet("Change History");
		int rownum = 0, cellnum = 0;
		CreationHelper createHelper = workbook.getCreationHelper();

		HSSFFont boldFont1 = workbook.createFont();
		boldFont1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

		HSSFCellStyle style2 = workbook.createCellStyle();
		style2.setFillForegroundColor(HSSFColor.GREY_40_PERCENT.index);
		style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		style2.setFont(boldFont1);
		style2.setWrapText(true);
		style2.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);
		style2.setBorderRight(HSSFCellStyle.BORDER_THIN);
		style2.setBorderTop(HSSFCellStyle.BORDER_THIN);
		style2.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		HSSFCellStyle style1 = workbook.createCellStyle();
		style1.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);
		style1.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		style1.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		style1.setBorderLeft(HSSFCellStyle.BORDER_THIN);
		style1.setBorderRight(HSSFCellStyle.BORDER_THIN);
		style1.setBorderTop(HSSFCellStyle.BORDER_THIN);

		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setDataFormat(createHelper.createDataFormat().getFormat(
				"yyyy-MM-DD hh:mm"));
		cellStyle.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cellStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		cellStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
		cellStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
		cellStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);

		Row row = sheet1.createRow(rownum++);

		Cell cell = row.createCell(cellnum++);
		/*
		 * cell.setCellValue("Incident Name"); cell.setCellStyle(style2);
		 */

		cell.setCellValue("Regulator");
		cell.setCellStyle(style2);

		cell = row.createCell(cellnum++);
		cell.setCellValue("Time");
		cell.setCellStyle(style2);

		cell = row.createCell(cellnum++);
		cell.setCellValue("User");
		cell.setCellStyle(style2);

		cell = row.createCell(cellnum++);
		cell.setCellValue("Old State");
		cell.setCellStyle(style2);

		cell = row.createCell(cellnum++);
		cell.setCellValue("New State");
		cell.setCellStyle(style2);

		cell = row.createCell(cellnum++);
		cell.setCellValue("Comment");
		cell.setCellStyle(style2);

		HSSFCellStyle style3 = workbook.createCellStyle();
		style3.setWrapText(true);
		if (null != regulatorStateLogVOList) {
			for (int i = 0; i < regulatorStateLogVOList.size(); i++) {
				RegulatorStateLogVO stateLogVO = regulatorStateLogVOList.get(i);
				/*
				 * IncidentReportFlowLogVO incidentReportFlowLogVO =
				 * incidentReportFlowLogVOList .get(i);
				 */
				List<IncidentReportFlowLogVO> incidentReportFlowLogVOList = stateLogVO
						.getLogVoList();
				if (null != incidentReportFlowLogVOList) {
					for (int j = 0; j < incidentReportFlowLogVOList.size(); j++) {
						IncidentReportFlowLogVO incidentReportFlowLogVO = incidentReportFlowLogVOList
								.get(j);
						row = sheet1.createRow(rownum++);
						cellnum = 0;
						cell = row.createCell(cellnum++);
						cell.setCellValue(stateLogVO.getRegulatorName());
						cell.setCellStyle(style1);

						cell = row.createCell(cellnum++);
						// CellStyle cellStyle = workbook.createCellStyle();
						// cellStyle.setDataFormat(createHelper.createDataFormat()
						// .getFormat("yyyy-MM-DD hh:mm"));
						Date updateTs = new Date(incidentReportFlowLogVO
								.getUpdateTs().getTime());
						cell.setCellValue((Date) updateTs);
						cell.setCellStyle(cellStyle);

						cell = row.createCell(cellnum++);
						cell.setCellValue(incidentReportFlowLogVO.getUpdateBy());
						cell.setCellStyle(style1);

						cell = row.createCell(cellnum++);
						cell.setCellValue(incidentReportFlowLogVO.getOldValue());
						cell.setCellStyle(style1);

						cell = row.createCell(cellnum++);
						cell.setCellValue(incidentReportFlowLogVO.getNewValue());
						cell.setCellStyle(style1);

						cell = row.createCell(cellnum++);
						cell.setCellValue(incidentReportFlowLogVO.getComment());
						cell.setCellStyle(style1);
					}
				}
			}
		}
		for (int i = 0; i < 6; i++) {
			sheet1.autoSizeColumn(i);
		}

	}

	public ResponseBuilder downloadStateChangeHistoryReport(
			BigDecimal incidentID) throws AuditLogDetailNotFoundException,
			IOException {
		ResponseBuilder rb = null;

		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		HSSFWorkbook workbook = new HSSFWorkbook();

		/*
		 * List<IncidentReportFlowLogVO> incidentReportFlowLogVOList =
		 * (List<IncidentReportFlowLogVO>) incidentManager
		 * .stateChangeHistoryData(incidentID);
		 */

		List<RegulatorStateLogVO> regulatorStateLogVO = incidentManager
				.stateChangeHistoryDataforPrint(incidentID);
		witeAuditDataToExcelForStateChange(workbook, regulatorStateLogVO);
		String fileName = (incidentID) + "_State_Change_History_Report.xls";
		workbook.write(bos);
		rb = Response.ok(bos.toByteArray()).type("application/vnd.ms-excel");
		rb.header("Content-Disposition", "attachment;filename=" + fileName);
		return rb;

	}

	public List<RegulatorStateLogVO> StateChangeHistoryReportView(
			BigDecimal incidentId) {
		List<RegulatorStateLogVO> regulatorStateLogVO = incidentManager
				.stateChangeHistoryDataforPrint(incidentId);
		/*
		 * List<IncidentReportFlowLogVO> incidentReportFlowLogVOList =
		 * (List<IncidentReportFlowLogVO>) incidentManager
		 * .stateChangeHistoryDataforPrint(incidentId);
		 */

		return regulatorStateLogVO;
	}

	public List<IncidentReportFlowLogVO> incidentReportView(Long reportFlowID) {
		// List<IncidentReportFlowLogVO> incidentReportFlowLogVOList =
		// (List<IncidentReportFlowLogVO>)incidentManager.(incidentId);
		List<IncidentReportFlowLogVO> listResults = incidentDAO
				.getIncidentRegulatorStateChangeAuditLog(reportFlowID);
		return listResults;
	}

	public DocumentVO uploadDocument(InputStream bufferedInputStream,
			String documentName, BigDecimal incidentid) throws IOException {
		String docNameForDB = "";

		Map<String, DocumentVO> documentMap = getDocumentListofIncident(incidentid);
		DocumentVO documentVO = new DocumentVO();
		if (documentMap.containsKey(documentName)) {
			documentVO = documentMap.get(documentName);
			Long latestVersion = 1L;
			for (VersionVO versionVO : documentVO.getVersionVOList()) {
				if (latestVersion < versionVO.getVersionId()) {
					latestVersion = versionVO.getVersionId();
				}
			}
			docNameForDB = incidentid + "_" + (latestVersion + 1) + "_"
					+ documentName;
		} else {
			docNameForDB = incidentid + "_" + "1_" + documentName;
		}

		long size = saveFile(bufferedInputStream, docNameForDB);
		Document document = new Document();
		document.setDocumentName(docNameForDB);
		// TODO: discuss for comment and path
		document.setComment("");
		document.setPath("");
		document.setExternalLinkFlag("");
		document.setIncidentId(incidentid);
		// TODO: set size
		document.setSize((int) size);
		document.setUpdateBy(sessionCache.getUserDetailsVO().getPerson()
				.getUid().trim());
		document.setUpdateTs(dateUtil.getSystemDate());
		documentDAO.save(document);
		documentVO = populateDocumentVO(document);
		// String docName = documentVO.getDocumentName().split("_", 3)[2];
		documentVO.setDocumentName(documentName);

		return documentVO;
	}

	/**
	 * @param bufferedInputStream
	 * @param documentName
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	private long saveFile(InputStream inputStream, String documentName)
			throws IOException {

		// save to file
		BufferedOutputStream bos = null;
		/*
		 * byte[] b = IOUtils.toByteArray(inputStream);
		 * System.out.println(b.length);
		 */
		// inputStream.mark();
		CommonUtil.createDirectories(systemParamertes
				.getParameter(SystemParameterEnum.INCIDENT_ATTACHMENT_PATH));
		File rootFolder = new File(
				systemParamertes
						.getParameter(SystemParameterEnum.INCIDENT_ATTACHMENT_PATH));
		String targetFileRoot = rootFolder + File.separator + documentName;

		FileUtils.touch(new File(targetFileRoot));
		bos = new BufferedOutputStream(new FileOutputStream(targetFileRoot));

		IOUtils.copy(inputStream, bos);

		bos.flush();
		IOUtils.closeQuietly(bos);
		File file = new File(targetFileRoot);
		return file.length();

	}

	private DocumentVO populateDocumentVO(Document document) {
		DocumentVO vo = new DocumentVO();
		vo.setDocumentName(document.getDocumentName());

		List<VersionVO> versionVOs = new ArrayList<>();
		VersionVO versionVO = new VersionVO();
		versionVO.setDocumentId(document.getDocumentId());
		versionVO.setExternalLinkFlag(document.getExternalLinkFlag());
		versionVO.setSize(document.getSize());
		versionVO.setUpdateBy(document.getUpdateBy());
		versionVO.setUpdateTs(document.getUpdateTs());
		versionVOs.add(versionVO);

		vo.setVersionVOList(versionVOs);

		return vo;
	}

	private Map<String, DocumentVO> getDocumentListofIncident(
			BigDecimal incidentID) {
		List<Document> docsList = documentDAO
				.findDocumentByIncidentId(incidentID);
		Map<String, DocumentVO> tempMap = new HashMap<String, DocumentVO>();

		for (Document obj : docsList) {

			String key = "";
			String docName[] = obj.getDocumentName().split("_", 3);
			if (docName.length > 2)
				key = docName[2];
			else
				key = docName[1];
			String version = docName[1];
			if (!tempMap.containsKey(key)) {

				VersionVO versionVO = new VersionVO();
				versionVO.setDocumentId(obj.getDocumentId());
				versionVO.setVersionId(Long.parseLong(version));
				versionVO.setUpdateBy(obj.getUpdateBy());
				versionVO.setSize(obj.getSize());
				versionVO.setUpdateTs(obj.getUpdateTs());

				DocumentVO documentVO = new DocumentVO();
				documentVO.setDocumentName(key);
				documentVO.getVersionVOList().add(versionVO);

				// add to Document Map.
				tempMap.put(key, documentVO);
			} else {
				DocumentVO documentVO = tempMap.get(key);

				VersionVO versionVO = new VersionVO();
				versionVO.setDocumentId(obj.getDocumentId());
				versionVO.setVersionId(Long.parseLong(version));
				versionVO.setUpdateBy(obj.getUpdateBy());
				versionVO.setSize(obj.getSize());
				versionVO.setUpdateTs(obj.getUpdateTs());

				documentVO.getVersionVOList().add(versionVO);
				// below is not required.
				// tempMap.put(key, documentVO);
			}

		}
		return tempMap;
	}

	public List<DocumentVO> getDocuments(BigDecimal incId) {
		Map<String, DocumentVO> tempMap = new HashMap<String, DocumentVO>();
		tempMap = getDocumentListofIncident(incId);
		List<DocumentVO> auditLogSummaryVOList = new ArrayList<DocumentVO>(
				tempMap.values());
		for (DocumentVO documentVO : auditLogSummaryVOList) {
			Collections.sort(documentVO.getVersionVOList(),
					new Comparator<VersionVO>() {
						@Override
						public int compare(final VersionVO object1,
								final VersionVO object2) {
							return (object1.getVersionId().compareTo(
									object2.getVersionId()) * -1);

						}
					});
		}
		return auditLogSummaryVOList;
	}

	protected double size(InputStream stream) {
		double length = 0;
		try {
			byte[] buffer = new byte[2048];
			int size;
			/* stream.mark(stream.toString().length()); */

			while ((size = stream.read(buffer)) != -1) {
				length += size;
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		return length;
	}

	public AllowableFileTypeVO getAllowedFileFormat() {

		AllowableFileTypeVO allowableFileTypeVO = new AllowableFileTypeVO();
		
		Integer fileSIze = 5000000;

		allowableFileTypeVO.setAllowableFileType(systemParamertes
				.getParameter(SystemParameterEnum.ALLOWED_DOC_TYPES));

		String sizeStr = systemParamertes
				.getParameter(SystemParameterEnum.ALLOWED_DOC_SIZE);

		try {
			Integer.parseInt(sizeStr);
		} catch (NumberFormatException e) {
			fileSIze = 5000000;
		}

		allowableFileTypeVO.setSize(fileSIze);
		return allowableFileTypeVO;

	}
}
